# To learn more about .editorconfig see https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference

root = true  #Remove the line if you want to inherit .editorconfig settings from higher directories

# All files
[*]
#### Core EditorConfig Options ####
# Indentation and spacing
indent_size = 2  #Recommended by default, but it can be overwritten by rules below (depending on file extension).
indent_style = space  #Spaces instead of tabs, as different code readors (e.g., online git code comparers) interprent tabs with different indent.

# New line preferences
end_of_line = crlf
insert_final_newline = true:error  #Git doesn't like, when file is not ended with space.
trim_trailing_whitespace = true:error  #Trailing whitespaces complicate work with code in text editor and git.

# Xml files
[*.{xml,xaml,config,aspx,cshtml,html}]
indent_size = 2  #Recommended as industry standard. Xml files have deep nesting, so small indent is important.

# C# files
[*.cs]
indent_size = 4  #Recommended as industry standard. Allowed to be replaced to 2. Not so important, as modern C# code-style recommends to break long lines.

#### .NET Coding Conventions ####

# Organize usings
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = false
file_header_template = unset

# this. and Me. preferences
dotnet_style_qualification_for_event = false:error
dotnet_style_qualification_for_field = false:error
dotnet_style_qualification_for_method = false:silent   #Sometimes, it's more readable when methods are called through this (e.g., this.GetType()).
dotnet_style_qualification_for_property = false:error

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:error  #Prefer int local; It's more readable, though can add some inconvinience over refactoring.
dotnet_style_predefined_type_for_member_access = false:error             #Prefer String.IsNullOrEmpty("s"); MSDN style. It displays that we work with class rather than primitive type.

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = never_if_unnecessary:silent  #Prefer var v = a + b * c; Over var v = a + (b * c);
dotnet_style_parentheses_in_other_binary_operators = never_if_unnecessary:silent       #Prefer var v = a || b && c; Over var v = a || (b && c);
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:error               #Prefer var v = a.b.Length; Over var v = (a.b).Length;
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:error     #Prefer var v = (a < b) == (c > d); Over var v = a < b == c > d;

# Modifier preferences
dotnet_style_require_accessibility_modifiers = omit_if_default:silent  #Prefer accessibility modifiers to be specified except if they are the default modifier.

# Expression-level preferences
dotnet_style_coalesce_expression = true:error                                    #Prefer var v = x ?? y; Over var v = x != null ? x : y;
dotnet_style_collection_initializer = true:error                                 #Prefer var list = new List<int> { 1, 2, 3 }; Over var list = new List<int>(); list.Add(1);
dotnet_style_explicit_tuple_names = true:error                                   #Prefer (string name, int age) customer = GetCustomer(); var name = customer.name; Over var name = customer.Item1;
dotnet_style_namespace_match_folder = true:error
dotnet_style_null_propagation = true:error                                       #Prefer string v = o?.ToString(); Over string v = o != null ? o.String() : null;
dotnet_style_object_initializer = true:error                                     #Prefer var c = new Customer() { Age = 21 }; Over var c = new Customer(); c.Age = 21;
dotnet_style_operator_placement_when_wrapping = beginning_of_line:error          #Prefer operators like && on new line
dotnet_style_prefer_auto_properties = true:error                                 #Prefer int Age { get; }
dotnet_style_prefer_compound_assignment = true:error                             #Prefer x += 1; Over x = x + 1;
dotnet_style_prefer_conditional_expression_over_assignment = true:silent         #Prefer string s = expr ? "hello" : "world"; But sometimes if-else is more convinient for big portions of code 
dotnet_style_prefer_conditional_expression_over_return = true:silent             #Prefer return expr ? "hello" : "world" But sometimes if-else is more convinient (e.g. arguments checking)
dotnet_style_prefer_inferred_anonymous_type_member_names = true:silent           #Prefer var anon = new { age, name }; var anon = new { age = age, name = name };
dotnet_style_prefer_inferred_tuple_names = true:error                            #Prefer var tuple = (age, name); Over var tuple = (age: age, name: name); But sometimes custom names are more clear
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:error    #Prefer if (value is null) Over if (object.ReferenceEquals(value, null))
dotnet_style_prefer_simplified_boolean_expressions = true:error                  #Prefer bool result1 = M1() && M2(); Over bool result1 = M1() && M2() ? true : false;
dotnet_style_prefer_simplified_interpolation = true:error                        #Prefer $"prefix {someValue} suffix"; Over $"prefix {someValue.ToString()} suffix";
